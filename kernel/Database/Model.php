<?php

namespace Kernel\Database;

use Kernel\Database\Config as DsnConfig;
use Kernel\Utils\Config;
use Kernel\Utils\StringUtil;

/**
 * Class Model
 *
 * @package Kernel\Database
 */
class Model
{
    /**
     * The fileds which the SQL selects.
     *
     * @var string
     */
    protected $select = '';
    
    /**
     * The SQL limit number.
     *
     * @var int
     */
    protected $limit = 1000;
    
    /**
     * The SQL orderby direction.
     * [
     *   ['field' => 'direction'],
     *   ['field' => 'direction'],
     * ]
     *
     * @var array
     */
    protected $orderBy = [];
    
    /**
     * The sql generated by the model.
     *
     * @var string
     */
    private $sql;
    
    /**
     * Get the name of the table.
     *
     * @var string
     */
    protected $tableName = 'Model';
    
    /**
     * Speicifing the model's database dsn config.
     *
     * @var \PDO
     */
    protected $connection = null;
    
    /**
     * Speicifing the model's database dsn config.
     *
     * @var DsnConfig
     */
    protected $dsnConfig = '';
    
    public function __construct(DsnConfig $config)
    {
        $this->dsnConfig = $config;
        $this->initConnection();
    }
    
    /**
     * The shortcut method to create a QueryBuilder instance using
     * the given dsn config.
     *
     * @param \Kernel\Database\Config $config
     *
     * @return \Kernel\Database\Model
     */
    public static function useConfig(DsnConfig $config)
    {
        return new static($config);
    }
    
    /**
     * init the connection
     *
     * @return \PDO
     */
    private function initConnection()
    {
        if (!is_null($this->connection)) {
            return $this->connection;
        }
        
        try {
            $this->connection = new \PDO(
                $this->dsnConfig->generateDsnString(),
                $this->dsnConfig->user,
                $this->dsnConfig->password
            );
        } catch (PDOException $e) {
            echo 'Connection failed: ' . $e->getMessage();
            die();
        }
    }
    
    /**
     * @return $this
     */
    public function find()
    {
        
        return $this;
    }
    
    public function all()
    {
        $sql = $this->compileSql();
        
        $this->pdoStatement = $this->connection->prepare($sql);
    }
    
    /**
     * Compile the sql from the properties.
     *
     * @return string
     */
    private function compileSql(): string
    {
        $orderBy = $this->compileOrderBy();
        $sql     = <<<SQL
select  {$this->select} from {$this->tableName}
LIMIT {$this->limit}
SQL;
        if (!empty($orderBy)) {
            $sql .= $orderBy;
        }
        
        return $this->sql = $sql;
    }
    
    /**
     * 编译Order by 语句
     * @return string
     */
    private function compileOrderBy()
    {
       if(empty($this->orderBy)) {
           return '';
       }
    
       $result = '';
        foreach ($this->orderBy as $field => $direction) {
        
       }
    }
}
